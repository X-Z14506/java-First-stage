/**
 * 模拟两个线程同时对一个账户进行取款操作
 *
 * 银行账户类
 *   使用线程同步机制，解决线程安全问题
 */
 
 
public class Account {
    //账号
    private String no;
    //余额
    private double balance;

    Object object = new Object();
    public Account() {

    }

    public Account(String no, double balance) {
        this.no = no;
        this.balance = balance;
    }

    public String getNo() {
        return no;
    }

    public void setNo(String no) {
        this.no = no;
    }

    public double getBalance() {
        return balance;
    }

    public void setBalance(double balance) {
        this.balance = balance;
    }

    //取款方法
    //以下程序必须是线程排队的，不能是并发的，一个线程把这里代码全部执行结束之后，另一个线程才能进来

    /*
        线程同步机制的语法是：
           synchronized（）{
               //线程同步代码块
           }
           synchronized后面小括号中传的这个数据相当关键
            这个数据必须是多线程共享数据，才能达到多线程排队

            ()中写什么？
               要看你想让哪些线程同步
               假设t1，t2，t3，t4，t5有五个线程
               你只希望t1，t2，t3排队，t4,t5不需要排队，则你一定要在（）中写一个t1,t2,t3共享的对象
               而这个对象对于t4,t5来说不是共享的

            这里的共享对象是：账户对象
            账户对象是共享的，那么this就是账户对象
            不一定是this，这里只要是多线程共享的那个对象就行
     */
    public void withdraw(double money) {
        /*Object o = null;
        synchronized (o){//如果传入空引用，会报空指针异常  java.lang.NullPointerException*/

        /*Object object2 = new Object();
        synchronized (object2) { //这样编写就不安全了，因为object2不是共享对象*/

        //synchronized ("abc") { // "abc"在字符串常量池当中，所以传入"abc"时，所有线程都会同步

        //synchronized (object) {//object是共享对象，所以也可以
        synchronized (this) {
            //t1和t2并发这个方法（t1和t2是两个栈，两个栈操作堆中同一个对象）
            //取款之前的余额
            double before = this.getBalance();
            //取款之后的余额
            double after = this.getBalance() - money;

            //在这里模拟一下网络延迟，百分百会出问题
            try {
                Thread.sleep(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            //更新余额
            //若t1执行到这里还没有执行这行代码，t2线程进来执行了，此时一定会出问题
            this.setBalance(after);
        }
    }
}
