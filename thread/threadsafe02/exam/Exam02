/*
        面试题：doOther方法执行的时候需要等待doSome方法的结束吗？

              需要，因为doSome执行的时候锁被占了，doOther只能等doSome执行结束才能执行

 */
 
 
public class Exam02 {
    public static void main(String[] args) throws InterruptedException {
        MyClass02 myClass = new MyClass02();

        //t1线程和t2线程共享myClass对象
        Thread t1 = new MyThread02(myClass);
        Thread t2 = new MyThread02(myClass);

        t1.setName("t1");
        t2.setName("t2");
        t1.start();
        Thread.sleep(1000);//这个睡眠的作用是保证t1线程先执行
        t2.start();
    }
}

class MyThread02 extends Thread {
    private MyClass02 myClass;
    public MyThread02(MyClass02 myClass) {
        this.myClass = myClass;
    }
    public void run() {
        if (Thread.currentThread().getName().equals("t1")) {
            myClass.doSome();
        }
        if (Thread.currentThread().getName().equals("t2")) {
            myClass.doOther();
        }
    }
}
/*
class MyRunnable implements Runnable {
    @Override
    public void run() {

    }
}*/

class MyClass02 {
    //synchronized 出现在实例方法上，表示锁this
    public synchronized void doSome() {
        System.out.println("doSome begin");
        try {
            Thread.sleep(1000*5);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
        System.out.println("doSome over");
    }

    public synchronized void doOther() {
        System.out.println("doOther begin");
        System.out.println("doOther over");
    }
}
