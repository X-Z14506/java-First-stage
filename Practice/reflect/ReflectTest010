/*
    重点：通过反射机制怎么调用一个对象的方法

    反射机制让带啊很具有通用性，可变化的内容都是写到配置文件当中，
    将来修改配置文件之后，创建的对象不一样了，调用的方法也不同了，
    但是java代码不需要做任何改动，这就是反射机制的魅力
 */
public class ReflectTest010 {
    public static void main(String[] args) throws ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException {


        //不使用反射机制调用方法
        System.out.println("======不使用反射机制调用方法======");
        UserService userService = new UserService();
        boolean loginSuccess = userService.login("admin","123");
        //System.out.println(loginSuccess);
        System.out.println(loginSuccess ? "登陆成功" : "登录失败");


        //使用反射机制调用一个方法
        System.out.println("========使用反射机制调用一个方法========");
        Class userServiceClass = Class.forName("reflect.UserService");
        //创建对象
        Object object = userServiceClass.newInstance();
        //java中区分方法是依靠方法名和形参列表
        //获取方法
        Method loginMethod = userServiceClass.getDeclaredMethod("login",String.class,String.class);
        //调用方法
        /*
            调用方法也需要四要素
               loginMethod方法
               object对象
               "admin","123"实参
               retValue返回值
         */
        //反射机制中最重要的方法
        Object retValue = loginMethod.invoke(object,"admin","123");
        System.out.println(retValue);
    }
}
