public class Main {
    //1.list中存放10万个数据，找出第一个重复的数据
    public static void main1(String[] args) {
        ArrayList<Integer> list = new ArrayList<>();
        Random random = new Random();

        //给list存入10个随机数
        for (int i = 0;i < 10_0000; i++) {
            int num = random.nextInt(10_0000);
            list.add(num);
        }
        //从get方法得到list中的值，如果set中存在这个值，则输出
        HashSet<Integer> set = new HashSet<>();
        for (int i = 0;i < 10_0000;i++) {
            if (set.contains(list.get(i))) {
                System.out.println(list.get(i));
                return;
            }
            else {
                set.add(list.get(i));
            }
        }
    }


    //3.将10万个数据，统计重复出现的数据及次数；
     static HashMap<Integer,Integer> map = new HashMap<>();
    public  static void main2(String[] args) {
        ArrayList<Integer> list1 = new ArrayList<>();
        Random random = new Random();

        //给list存入10个随机数
        for (int i = 0;i < 50; i++) {
            int num = random.nextInt(50);
            list1.add(num);
        }

        //遍历list1
        for (Integer key:list1) {
            if (map.get(key) == null) {
                map.put(key,1);
            } else {
                int val = map.get(key);
                map.put(key,val+1);
            }
        }
        for (Map.Entry<Integer,Integer>entry : map.entrySet()) {
            if (entry.getValue() > 1) {
                System.out.println("重复的数字："+entry.getKey()+"次数："+entry.getValue());
            }
        }
//        重复的数字：1次数：2
//        重复的数字：2次数：2
//        重复的数字：6次数：2
//        重复的数字：7次数：3
//        重复的数字：18次数：3
//        重复的数字：23次数：2
//        重复的数字：25次数：3
//        重复的数字：27次数：3
//        重复的数字：40次数：3
//        重复的数字：41次数：3
//        重复的数字：43次数：2
//        重复的数字：45次数：2
    }
    
    //给定一个非空整数数组，除了某个元素只出现一次以外，其余每个元素均出现两次。找出那个只出现了一次的元素。
    public int singleNumber(int[] nums) {
        //方法二：用异或方法
        int ret = 0;
        for (int i : nums) {
            ret ^= i;
        }
        return ret;

        /*方法一
        HashSet<Integer> hashSet = new HashSet<>();
        for (int i :nums) {
            if (hashSet.contains(i)) {
                hashSet.remove(i);
            }else {
                hashSet.add(i);
            }
        }
        for (int i:nums) {
            if (hashSet.contains(i)) {
                return i;
            }
        }
        return -1;

         */
    }
